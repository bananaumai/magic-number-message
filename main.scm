(define (culc-answer arg1 :rest args)
  (string-join
   (map (lambda (c)
          (make-string 1 c))
        (map integer->char
             (map (lambda (pair)
                    (+ (* (car pair) 16)
                       (car (cdr pair))))
                  (slices
                   (map (lambda (n)
                          ((n (lambda (x)
                                (+ 1 x))) 0))
                        (cons arg1 args))
                   2))))
   ""))

(culc-answer
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f x)))))))))
 (lambda (f) (lambda (x) (f (f (f (f x))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f x))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f x))))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f x))))))))
 (lambda (f) (lambda (x) (f x)))
 (lambda (f) (lambda (x) (f (f (f (f (f (f x))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f x))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))
 (lambda (f) (lambda (x) (f (f x))))
 (lambda (f) (lambda (x) x))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f x)))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f (f x)))))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f x))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f (f (f x)))))))))
 (lambda (f) (lambda (x) (f (f (f (f (f x))))))))
